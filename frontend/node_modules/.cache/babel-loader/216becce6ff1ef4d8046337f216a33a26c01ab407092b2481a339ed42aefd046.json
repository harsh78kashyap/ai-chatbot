{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HARSH KASHYAP\\\\Desktop\\\\ai chatbot\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State to hold the list of messages\n  const [messages, setMessages] = useState([]);\n  // State for the user's input\n  const [input, setInput] = useState('');\n  // State to show a loading indicator\n  const [isLoading, setIsLoading] = useState(false);\n  // State to hold any error messages\n  const [error, setError] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMessage = {\n      role: 'user',\n      content: input\n    };\n    const newMessages = [...messages, userMessage];\n    setMessages(newMessages);\n    setInput('');\n    setIsLoading(true);\n    setError('');\n    try {\n      // Send the message to your backend API\n      const response = await fetch('http://localhost:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      if (!response.ok) {\n        // This will catch HTTP errors like 500\n        throw new Error('The server responded with an error. Please try again later.');\n      }\n      const data = await response.json();\n\n      // Add the AI's reply to the messages\n      const aiMessage = {\n        role: 'assistant',\n        content: data.reply\n      };\n      setMessages([...newMessages, aiMessage]);\n    } catch (err) {\n      console.error(err);\n      setError(err.message || 'Failed to get a response. Please check your connection and try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"AI Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-area\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.role}`,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message assistant\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-area\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message here...\",\n        \"aria-label\": \"Chat input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8BUNFN7ziXypk/0PTmLbkvhKyHk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","error","setError","handleSubmit","e","preventDefault","trim","userMessage","role","content","newMessages","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","data","json","aiMessage","reply","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/HARSH KASHYAP/Desktop/ai chatbot/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  // State to hold the list of messages\r\n  const [messages, setMessages] = useState([]);\r\n  // State for the user's input\r\n  const [input, setInput] = useState('');\r\n  // State to show a loading indicator\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // State to hold any error messages\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = { role: 'user', content: input };\r\n    const newMessages = [...messages, userMessage];\r\n    setMessages(newMessages);\r\n    setInput('');\r\n    setIsLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      // Send the message to your backend API\r\n      const response = await fetch('http://localhost:5000/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ message: input }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // This will catch HTTP errors like 500\r\n        throw new Error('The server responded with an error. Please try again later.');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Add the AI's reply to the messages\r\n      const aiMessage = { role: 'assistant', content: data.reply };\r\n      setMessages([...newMessages, aiMessage]);\r\n\r\n    } catch (err) {\r\n      console.error(err);\r\n      setError(err.message || 'Failed to get a response. Please check your connection and try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"header\">\r\n        <h1>AI Chatbot</h1>\r\n      </div>\r\n      <div className=\"message-area\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.role}`}>\r\n            <p>{msg.content}</p>\r\n          </div>\r\n        ))}\r\n        {isLoading && (\r\n          <div className=\"message assistant\">\r\n            <div className=\"typing-indicator\">\r\n              <span></span><span></span><span></span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n      </div>\r\n      <form className=\"input-area\" onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message here...\"\r\n          aria-label=\"Chat input\"\r\n        />\r\n        <button type=\"submit\" disabled={isLoading}>Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}